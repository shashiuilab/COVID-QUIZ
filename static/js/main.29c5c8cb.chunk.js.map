{"version":3,"sources":["logo.svg","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/Result.js","api/quizQuestions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Question","props","className","content","QuestionCount","counter","total","AnswerOption","type","name","checked","answerType","answer","id","value","disabled","onChange","onAnswerSelected","htmlFor","answerContent","Quiz","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","Container","Row","Col","questionId","questionTotal","Alert","color","question","answerOptions","map","key","Button","onClick","onSubmitClicked","Result","quizResult","quizQuestions","answers","App","setUserAnswer","setState","state","answersCount","handleAnswerSelected","event","currentTarget","getResults","answersCountKeys","Object","keys","answersCountValues","maxAnswerCount","Math","max","apply","filter","setResults","result","length","setNextQuestion","shuffleArray","array","temporaryValue","randomIndex","currentIndex","floor","random","onSubmitClickedHandler","setTimeout","isSubmitClicked","shuffledAnswerOptions","this","Jumbotron","href","target","renderResult","renderQuiz","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29c5c8cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Question(props) {\r\n  return (\r\n    <h2 className=\"question lead\">{props.content}</h2>\r\n  );\r\n}\r\n\r\nQuestion.propTypes = {\r\n  content: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Question;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction QuestionCount(props) {\r\n  return (\r\n    <div className=\"questionCount\">\r\n      Question <span>{props.counter}</span> of <span>{props.total}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nQuestionCount.propTypes = {\r\n  counter: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired\r\n};\r\n\r\nexport default QuestionCount;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction AnswerOption(props) {\r\n  return (\r\n    <li className=\"answerOption\">\r\n      <input\r\n        type=\"radio\"\r\n        className=\"radioCustomButton\"\r\n        name=\"radioGroup\"\r\n        checked={props.answerType === props.answer}\r\n        id={props.answerType}\r\n        value={props.answerType}\r\n        disabled={props.answer}\r\n        onChange={props.onAnswerSelected}\r\n      />\r\n      <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\r\n        {props.answerContent}\r\n      </label>\r\n    </li>\r\n  );\r\n}\r\n\r\nAnswerOption.propTypes = {\r\n  answerType: PropTypes.string.isRequired,\r\n  answerContent: PropTypes.string.isRequired,\r\n  answer: PropTypes.string.isRequired,\r\n  onAnswerSelected: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AnswerOption;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Question from '../components/Question';\r\nimport QuestionCount from '../components/QuestionCount';\r\nimport AnswerOption from '../components/AnswerOption';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport { Button } from 'reactstrap';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport { Alert } from 'reactstrap';\r\n\r\nfunction Quiz(props) {\r\n    function renderAnswerOptions(key) {\r\n        return (\r\n          <AnswerOption\r\n            key={key.content}\r\n            answerContent={key.content}\r\n            answerType={key.type}\r\n            answer={props.answer}\r\n            questionId={props.questionId}\r\n            onAnswerSelected={props.onAnswerSelected}\r\n          />\r\n        );\r\n      }\r\n    return (\r\n      <CSSTransitionGroup\r\n    className=\"container\"\r\n    component=\"div\"\r\n    transitionName=\"fade\"\r\n    transitionEnterTimeout={800}\r\n    transitionLeaveTimeout={500}\r\n    transitionAppear\r\n    transitionAppearTimeout={500}\r\n  >\r\n      <Container>\r\n      <Row>\r\n          <Col>\r\n            <h2 className=\"lead\">Here is a simple quiz that helps you assess your symptoms and tell you if you are COVID positive or not. \r\n            Please answer the following questions with atmost accurary for accurate results.</h2>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <QuestionCount\r\n              counter={props.questionId}\r\n              total={props.questionTotal}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Alert color=\"success\">\r\n              <Question content={props.question} />\r\n            </Alert>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <ul className=\"answerOptions\">\r\n            {props.answerOptions.map(renderAnswerOptions)}\r\n          </ul>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Button color=\"primary\" onClick={props.onSubmitClicked}>Submit</Button>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      </CSSTransitionGroup>\r\n    );\r\n  }\r\n  \r\n  Quiz.propTypes = {\r\n    answer: PropTypes.string.isRequired,\r\n    answerOptions: PropTypes.array.isRequired,\r\n    counter: PropTypes.number.isRequired,\r\n    question: PropTypes.string.isRequired,\r\n    questionId: PropTypes.number.isRequired,\r\n    questionTotal: PropTypes.number.isRequired,\r\n    onAnswerSelected: PropTypes.func.isRequired\r\n  };\r\n  \r\n  export default Quiz;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\n\r\nfunction Result(props) {\r\n  return (\r\n  \t<CSSTransitionGroup\r\n    className=\"container result\"\r\n    component=\"div\"\r\n    transitionName=\"fade\"\r\n    transitionEnterTimeout={800}\r\n    transitionLeaveTimeout={500}\r\n    transitionAppear\r\n    transitionAppearTimeout={500}\r\n  >\r\n    <div className=\"result\">\r\n      <strong>{props.quizResult}</strong>!\r\n    </div>\r\n    </CSSTransitionGroup>\r\n  );\r\n}\r\n\r\nResult.propTypes = {\r\n  quizResult: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Result;","var quizQuestions = [\r\n    {\r\n        question: \"Did you travel outside the country in the last 14-21 days?\",\r\n        answers: [\r\n            {\r\n                type: \"Please self Isolate yourself\",\r\n                content: \"YES\"\r\n            },\r\n            {\r\n                type: \"You are not positive for COVID-19. But please follow the instructions from local authorities.\",\r\n                content: \"NO\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"Do you have any of the symptoms from Dry Cough, Fever, Running nose, Shortness of Breath\",\r\n        answers: [\r\n            {\r\n                type: \"Please Home Quatrantine yourself and dial 111 for urgent help\",\r\n                content: \"YES\"\r\n            },\r\n            {\r\n                type: \"You are not positive for COVID-19. But please follow the instructions from local authorities.\",\r\n                content: \"NO\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"Did you meet anyone with COVID-19 symptoms?\",\r\n        answers: [\r\n            {\r\n                type: \"Please Home Quatrantine yourself and dial 111 for urgent help\",\r\n                content: \"YES\"\r\n            },\r\n            {\r\n                type: \"You are not positive for COVID-19. But please follow the instructions from local authorities.\",\r\n                content: \"NO\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"Does any of your family member have symptoms as mentioned in question 2\",\r\n        answers: [\r\n            {\r\n                type: \"Please Home Quatrantine yourself and dial 111 for urgent help\",\r\n                content: \"YES\"\r\n            },\r\n            {\r\n                type: \"You are not positive for COVID-19. But please follow the instructions from local authorities.\",\r\n                content: \"NO\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        question: \"Despite having the symptoms as mentioned earlier, did you meet anyone outside?\",\r\n        answers: [\r\n            {\r\n            \r\n                type: \"Please Home Quatrantine yourself and dial 111 for urgent help. Also, please inform the authorities about the persons whom you have met\",\r\n                content: \"YES\"\r\n        \r\n            },\r\n            {\r\n                type: \"You are not positive for COVID-19. But please follow the instructions from local authorities.\",\r\n                content: \"NO\"\r\n            }\r\n        ]\r\n    }\r\n  ];\r\n  \r\n  export default quizQuestions;\r\n  ","import React, { Component }  from 'react';\nimport logo from './logo.svg';\nimport Question from './components/Question';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport quizQuestions from './api/quizQuestions';\nimport { Jumbotron, Button } from 'reactstrap';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: '',\n      isSubmitClicked: false\n    };\n  }question\n  componentDidMount() {\n    const shuffledAnswerOptions = quizQuestions.map((question) => this.shuffleArray(question.answers));  \n  \n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n  setUserAnswer = (answer) => {\n    this.setState((state) => ({\n      answersCount: {\n        ...state.answersCount,\n        [answer]: (state.answersCount[answer] || 0) + 1\n      },\n      answer: answer\n    }));\n  }\n  handleAnswerSelected = (event) => {\n    this.setUserAnswer(event.currentTarget.value);\n  }\n  getResults = ()=> {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map((key) => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n  \n    return answersCountKeys.filter((key) => answersCount[key] === maxAnswerCount);\n  }\n  setResults = (result) => {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n  }\n  setNextQuestion = () => {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    });\n  }\n  shuffleArray = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  };\n  onSubmitClickedHandler = () => {\n    if(this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n        onSubmitClicked={this.onSubmitClickedHandler}\n      />\n    );\n  }\n  \n  renderResult() {\n    return (\n      <Result quizResult={this.state.result} />\n    );\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron>\n          <h1 className=\"display-4\">COVID-19</h1>\n          <p className=\"lead\">Coronavirus disease (COVID-19) is an infectious disease caused by a new virus.</p>\n          <hr className=\"my-2\" />\n          <p>The disease causes respiratory illness (like the flu) with symptoms such as a cough, fever, and in more severe cases, difficulty breathing.</p>\n          <p>You can protect yourself by washing your hands frequently, avoiding touching your face, and avoiding close contact (1 meter or 3 feet) with people who are unwell.</p>\n          <a href=\"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\" target=\"_blank\">Click here to Learn more</a>\n      </Jumbotron>\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}